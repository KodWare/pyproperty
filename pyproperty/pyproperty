#! /usr/bin/python3
from __future__ import print_function
import sys
#__import__("colorama").init() # You can enable this 


if len(sys.argv) < 2:
    sys.exit("Usage   : {ss} <module>\nExample : {ss} os urllib.request".format(ss=sys.argv[0]))

call = False
sys.argv.pop(0)
if "-c" in sys.argv:
    call = True
    sys.argv.pop(sys.argv.index("-c"))

if "--call" in sys.argv:
    call = True
    sys.argv.pop(sys.argv.index("--call"))


import_list = []
ignore_dict = {"os":["abort","wait","wait3","wait4","waitpid","waitpid_result","waitpid"]}

def ChechAttr(i,attr):
    if i.__name__ in ignore_dict.keys() and attr in ignore_dict[i.__name__]:
        raise OSError("Module {} in IgnoreDict !".format(attr))


def getAttr(i,attr):
    if call:
        ChechAttr(i,attr)
        return i.__getattribute__(attr)()
    else:
        return i.__getattribute__(attr)


for i in sys.argv:import_list.append(__import__(i))
for num , i in enumerate(import_list):
    print("\n\t Module : {}\n".format(i.__name__))
    for attr in dir(i):
        try:
            self = getAttr(i,attr)
        except SystemExit:
            print("Module : \033[31m{}.{}\033[0m | \033[31mError\033[0m  : SystemExit".format(i.__name__,attr))
        
        except Exception as error:
            print("Module : \033[31m{}.{}\033[0m | \033[31mError\033[0m  : {}".format(i.__name__,attr,error))
        
        else:
            print("Module : \033[32m{}.{}\033[0m | \033[33mOutput\033[0m : {}".format(i.__name__,attr,self))

